REMOVE ELEMENT
//////////////CODE///////

JAVA


class Solution {
    public int removeElement(int[] nums, int val) {
        int j =0;
        for(int i =0;i<nums.length; i++)
        {
            if(nums[i] != val)
            {
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    }
}

MAXIMUM SUBARRAY
///////CODE////////
JAVA

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int min = nums[0];
        for(int i =1; i<nums.length; i++)
        {
            max = Math.max(max+nums[i], nums[i]);
                if(max>min)
                    min=max;
        }
        return min;
    }
}


MERGE SORTED ARRAY
/////////CODE///////

JAVA

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int count =0;
        for(int i =m; i<m+n;i++)
        {
            nums1[i]=nums2[count++];
        }
        Arrays.sort(nums1);
    }
}
CONVERT SORTED ARRAY TO BINARY SEARCH TREE
//////CODE////////


JAVA

class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums.length == 0)
            return null;
        return helper(nums, 0, nums.length-1);
    }
    TreeNode helper(int[] nums, int low, int high)
    {
        if(low>high)
            return null;
        int mid = (low+high)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = helper(nums, low, mid-1);
        root.right = helper(nums, mid+1, high);
        return root;
    }
}
